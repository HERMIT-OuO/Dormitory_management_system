{"remainingRequest":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js!E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ICE\\VUE-ADMIN\\src\\routerConfig.js","dependencies":[{"path":"E:\\ICE\\VUE-ADMIN\\src\\routerConfig.js","mtime":1558964446369},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n/* eslint-disable */\n// 工具\nimport util from '@/libs/util.ice'; // 页面和布局\n\nimport Index from \"./pages/Index\";\nimport Login from \"./pages/Login\";\nimport Error404 from \"./pages/Error404\";\nimport Demo1 from \"./pages/Demo1\";\nimport Demo2 from \"./pages/Demo2\";\nimport Repair from \"./pages/Repair\";\nimport Announcement from \"./pages/Announcement\";\nimport StudentManagement from \"./pages/Student-management\";\nimport HeaderAside from \"./layouts/HeaderAside\"; // 变量名 routerConfig 为 iceworks 检测关键字\n// ice 会自动在这个变量下添加路由数据\n// 请不要修改名称\n// 备注 ice 自动添加的路由记录是以下格式\n// {\n//   path: '/page4',\n//   layout: d2LayoutMain,\n//   component: 4\n// }\n// 如果不指定 name 字段，会根据 path 生成 name = page-demo1\n// 转换规则见 util.recursiveRouterConfig 中 path2name 方法\n// meta 字段会和默认值使用 Object.assign 合并\n// 如果不指定 meta.name 的话，name 字段会使用和上面路由 name 一样的取值逻辑\n// 下面两个页面就是对比 你可以分别观察两个页面上显示的路由数据差异\n\nvar routerConfig = [// 首页 必须 name:index\n{\n  path: '/',\n  name: 'index',\n  layout: HeaderAside,\n  component: Index,\n  meta: {\n    auth: true,\n    title: '首页'\n  }\n}, // 刷新页面 必须保留\n{\n  path: '/refresh',\n  name: 'refresh',\n  layout: HeaderAside,\n  hidden: true,\n  component: {\n    beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n      next(function (vm) {\n        return vm.$router.replace(from.fullPath);\n      });\n    },\n    render: function render(h) {\n      return h();\n    }\n  }\n}, // 页面重定向 必须保留\n{\n  path: '/redirect/:route*',\n  name: 'redirect',\n  layout: HeaderAside,\n  hidden: true,\n  component: {\n    beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n      next(function (vm) {\n        return vm.$router.replace(JSON.parse(from.params.route));\n      });\n    },\n    render: function render(h) {\n      return h();\n    }\n  }\n}, {\n  path: '/demo1',\n  name: 'demo1',\n  layout: HeaderAside,\n  component: Demo1,\n  meta: {\n    auth: true,\n    title: '演示 1'\n  }\n}, {\n  path: '/demo2',\n  layout: HeaderAside,\n  component: Demo2\n}, {\n  path: '/Repair',\n  layout: HeaderAside,\n  component: Repair,\n  meta: {\n    auth: true,\n    title: '报修管理'\n  }\n}, {\n  path: '/Announcement',\n  layout: HeaderAside,\n  component: Announcement,\n  meta: {\n    auth: true,\n    title: '公告管理'\n  }\n}, {\n  path: '/Studentmanagement',\n  layout: HeaderAside,\n  component: StudentManagement,\n  meta: {\n    auth: true,\n    title: '学生管理'\n  }\n}]; // 不参与菜单显示的\n// ice 不会处理这部分\n// 但是这部分路由也会被注册\n// 处理规则同 routerConfig\n\nvar routerConfigMenuOut = [// 登录\n{\n  path: '/login',\n  name: 'login',\n  component: Login,\n  meta: {\n    auth: false\n  }\n}, // 404\n{\n  path: '*',\n  component: Error404\n}]; // 导出全部路由设置\n// 这个数据会在 router.js 中被扁平处理\n\nexport default util.recursiveRouterConfig([].concat(routerConfig, routerConfigMenuOut)); // 导出参与多标签页处理的路由设置\n// 这个数据会在 mian.js 中使用\n\nexport var frameInRoutes = util.recursiveRouterConfig(routerConfig).map(function (e) {\n  var route = e.children ? e.children[0] : e;\n  return {\n    path: e.path,\n    name: route.name,\n    hidden: route.hidden,\n    meta: route.meta\n  };\n});",{"version":3,"sources":["E:\\ICE\\VUE-ADMIN\\src\\routerConfig.js"],"names":["util","Index","Login","Error404","Demo1","Demo2","Repair","Announcement","StudentManagement","HeaderAside","routerConfig","path","name","layout","component","meta","auth","title","hidden","beforeRouteEnter","to","from","next","vm","$router","replace","fullPath","render","h","JSON","parse","params","route","routerConfigMenuOut","recursiveRouterConfig","frameInRoutes","map","e","children"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// 工具\nimport util from '@/libs/util.ice'; // 页面和布局\n\nimport Index from './pages/Index';\nimport Login from './pages/Login';\nimport Error404 from './pages/Error404';\nimport Demo1 from './pages/Demo1';\nimport Demo2 from './pages/Demo2';\nimport Repair from './pages/Repair';\nimport Announcement from './pages/Announcement';\nimport StudentManagement from './pages/Student-management';\nimport HeaderAside from './layouts/HeaderAside'; // 变量名 routerConfig 为 iceworks 检测关键字\n// ice 会自动在这个变量下添加路由数据\n// 请不要修改名称\n// 备注 ice 自动添加的路由记录是以下格式\n// {\n//   path: '/page4',\n//   layout: d2LayoutMain,\n//   component: 4\n// }\n// 如果不指定 name 字段，会根据 path 生成 name = page-demo1\n// 转换规则见 util.recursiveRouterConfig 中 path2name 方法\n// meta 字段会和默认值使用 Object.assign 合并\n// 如果不指定 meta.name 的话，name 字段会使用和上面路由 name 一样的取值逻辑\n// 下面两个页面就是对比 你可以分别观察两个页面上显示的路由数据差异\n\nconst routerConfig = [\n  // 首页 必须 name:index\n  {\n    path: '/',\n    name: 'index',\n    layout: HeaderAside,\n    component: Index,\n    meta: {\n      auth: true,\n      title: '首页',\n    },\n  }, // 刷新页面 必须保留\n  {\n    path: '/refresh',\n    name: 'refresh',\n    layout: HeaderAside,\n    hidden: true,\n    component: {\n      beforeRouteEnter(to, from, next) {\n        next(vm => vm.$router.replace(from.fullPath));\n      },\n\n      render: h => h(),\n    },\n  }, // 页面重定向 必须保留\n  {\n    path: '/redirect/:route*',\n    name: 'redirect',\n    layout: HeaderAside,\n    hidden: true,\n    component: {\n      beforeRouteEnter(to, from, next) {\n        next(vm => vm.$router.replace(JSON.parse(from.params.route)));\n      },\n\n      render: h => h(),\n    },\n  },\n  {\n    path: '/demo1',\n    name: 'demo1',\n    layout: HeaderAside,\n    component: Demo1,\n    meta: {\n      auth: true,\n      title: '演示 1',\n    },\n  },\n  {\n    path: '/demo2',\n    layout: HeaderAside,\n    component: Demo2,\n  },\n  {\n    path: '/Repair',\n    layout: HeaderAside,\n    component: Repair,\n    meta: {\n      auth: true,\n      title: '报修管理',\n    },\n  },\n  {\n    path: '/Announcement',\n    layout: HeaderAside,\n    component: Announcement,\n    meta: {\n      auth: true,\n      title: '公告管理',\n    },\n  },\n  {\n    path: '/Studentmanagement',\n    layout: HeaderAside,\n    component: StudentManagement,\n    meta: {\n      auth: true,\n      title: '学生管理'\n    }\n  },\n]; // 不参与菜单显示的\n// ice 不会处理这部分\n// 但是这部分路由也会被注册\n// 处理规则同 routerConfig\n\nconst routerConfigMenuOut = [\n  // 登录\n  {\n    path: '/login',\n    name: 'login',\n    component: Login,\n    meta: {\n      auth: false,\n    },\n  }, // 404\n  {\n    path: '*',\n    component: Error404,\n  },\n]; // 导出全部路由设置\n// 这个数据会在 router.js 中被扁平处理\n\nexport default util.recursiveRouterConfig([\n  ...routerConfig,\n  ...routerConfigMenuOut,\n]); // 导出参与多标签页处理的路由设置\n// 这个数据会在 mian.js 中使用\n\nexport const frameInRoutes = util.recursiveRouterConfig(routerConfig).map(e => {\n  const route = e.children ? e.children[0] : e;\n  return {\n    path: e.path,\n    name: route.name,\n    hidden: route.hidden,\n    meta: route.meta,\n  };\n});\n"]}]}