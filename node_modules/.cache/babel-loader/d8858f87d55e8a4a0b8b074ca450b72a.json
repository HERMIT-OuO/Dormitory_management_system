{"remainingRequest":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js!E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ICE\\VUE-ADMIN\\src\\libs\\util.ice.js","dependencies":[{"path":"E:\\ICE\\VUE-ADMIN\\src\\libs\\util.ice.js","mtime":1558363754886},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"E:\\\\ICE\\\\VUE-ADMIN\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nvar util = {};\n/**\n * @description 路由配置扁平化\n * @param {Array} config 层级路由设置\n */\n\nutil.recursiveRouterConfig = function recursiveRouterConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var routerMap = [];\n  /**\n   * path -> name\n   * @param {String} path path\n   */\n\n  function path2name() {\n    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return path.split('/').filter(function (e) {\n      return e;\n    }).join('-');\n  }\n  /**\n   * recursive\n   * @param {Array} con config\n   */\n\n\n  function recursive(con) {\n    con.forEach(function (item) {\n      var route = item.layout ? {\n        // -> 在主布局内的页面\n        // 页面地址\n        path: item.path,\n        // 使用的布局\n        component: item.layout,\n        // 子路由 一个里面只会有一个子路由 并且 path = ‘’\n        children: [{\n          // 这里留空 访问上面父级地址的时候会自动跳到这里\n          path: '',\n          // 如果路由没有设置 name 就用 path 处理成name\n          name: item.name || path2name(item.path),\n          // meta 设置和默认值合并\n          meta: Object.assign({\n            auth: true,\n            title: path2name(item.path)\n          }, item.meta),\n          // 页面组件\n          component: item.component\n        }]\n      } : {\n        // -> 不在主布局内的页面\n        // 页面地址\n        path: item.path,\n        // 如果路由没有设置 name 就用 path 处理成name\n        name: item.name || path2name(item.path),\n        // meta 设置和默认值合并\n        meta: Object.assign({\n          auth: true,\n          title: path2name(item.path)\n        }, item.meta),\n        // 页面组件\n        component: item.component\n      };\n\n      if (Array.isArray(item.children)) {\n        recursive(item.children);\n      }\n\n      routerMap.push(route);\n    });\n    return routerMap;\n  }\n\n  return recursive(config);\n};\n/**\n * @description 转换菜单数据\n * @param {Array} arr menu config\n */\n\n\nutil.recursiveMenuConfig = function recursiveMenuConfig(arr) {\n  var res = [];\n  /**\n   * 转换每个菜单对象上的 name 为 title\n   * @param {Object} obj menu\n   */\n\n  function convert(obj) {\n    var name = obj.name,\n        path = obj.path,\n        icon = obj.icon,\n        children = obj.children;\n    return _objectSpread({\n      title: name,\n      icon: icon,\n      path: path\n    }, children ? {\n      children: children.map(convert)\n    } : {});\n  }\n\n  arr.forEach(function (menu) {\n    res.push(convert(menu));\n  });\n  return res;\n};\n\nexport default util;",null]}