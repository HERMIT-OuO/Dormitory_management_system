{"remainingRequest":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js!E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\page.js","dependencies":[{"path":"E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\page.js","mtime":1558363759017},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"E:\\\\ICE\\\\VUE-ADMIN\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\ICE\\\\VUE-ADMIN\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { get } from 'lodash';\nimport router from '@/router';\nimport setting from '@/setting.js'; // 判定是否需要缓存\n\nvar isKeepAlive = function isKeepAlive(data) {\n  return get(data, 'meta.cache', false);\n};\n\nexport default {\n  namespaced: true,\n  state: {\n    // 可以在多页 tab 模式下显示的页面\n    pool: [],\n    // 当前显示的多页面列表\n    opened: setting.page.opened,\n    // 当前页面\n    current: '',\n    // 需要缓存的页面 name\n    keepAlive: []\n  },\n  actions: {\n    /**\n     * @class opened\n     * @description 从持久化数据载入分页列表\n     * @param {Object} state vuex state\n     */\n    openedLoad: function openedLoad(_ref) {\n      var state = _ref.state,\n          commit = _ref.commit,\n          dispatch = _ref.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(resolve) {\n          var value, valid;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return dispatch('d2admin/db/get', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    defaultValue: setting.page.opened,\n                    user: true\n                  }, {\n                    root: true\n                  });\n\n                case 2:\n                  value = _context.sent;\n                  // 在处理函数中进行数据优化 过滤掉现在已经失效的页签或者已经改变了信息的页签\n                  // 以 fullPath 字段为准\n                  // 如果页面过多的话可能需要优化算法\n                  // valid 有效列表 1, 1, 0, 1 => 有效, 有效, 失效, 有效\n                  valid = []; // 处理数据\n\n                  state.opened = value.map(function (opened) {\n                    // 忽略首页\n                    if (opened.fullPath === '/') {\n                      valid.push(1);\n                      return opened;\n                    } // 尝试在所有的支持多标签页的页面里找到 name 匹配的页面\n\n\n                    var find = state.pool.find(function (item) {\n                      return item.name === opened.name;\n                    }); // 记录有效或无效信息\n\n                    valid.push(find ? 1 : 0); // 返回合并后的数据 新的覆盖旧的\n                    // 新的数据中一般不会携带 params 和 query, 所以旧的参数会留存\n\n                    return Object.assign({}, opened, find);\n                  }).filter(function (opened, index) {\n                    return valid[index] === 1;\n                  }); // 根据 opened 数据生成缓存设置\n\n                  commit('keepAliveRefresh'); // end\n\n                  resolve();\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * 将 opened 属性赋值并持久化 在这之前请先确保已经更新了 state.opened\n     * @param {Object} state vuex state\n     */\n    opend2db: function opend2db(_ref3) {\n      var state = _ref3.state,\n          dispatch = _ref3.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 设置数据\n                  dispatch('d2admin/db/set', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    value: state.opened,\n                    user: true\n                  }, {\n                    root: true\n                  }); // end\n\n                  resolve();\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 更新页面列表上的某一项\n     * @param {Object} state vuex state\n     * @param {Object} param { index, params, query, fullPath } 路由信息\n     */\n    openedUpdate: function openedUpdate(_ref5, _ref6) {\n      var state = _ref5.state,\n          commit = _ref5.commit,\n          dispatch = _ref5.dispatch;\n      var index = _ref6.index,\n          params = _ref6.params,\n          query = _ref6.query,\n          fullPath = _ref6.fullPath;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve) {\n          var page;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  // 更新页面列表某一项\n                  page = state.opened[index];\n                  page.params = params || page.params;\n                  page.query = query || page.query;\n                  page.fullPath = fullPath || page.fullPath;\n                  state.opened.splice(index, 1, page); // 持久化\n\n                  _context3.next = 7;\n                  return dispatch('opend2db');\n\n                case 7:\n                  // end\n                  resolve();\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 新增一个 tag (打开一个页面)\n     * @param {Object} state vuex state\n     * @param {Object} param new tag info\n     */\n    add: function add(_ref8, _ref9) {\n      var state = _ref8.state,\n          commit = _ref8.commit,\n          dispatch = _ref8.dispatch;\n      var tag = _ref9.tag,\n          params = _ref9.params,\n          query = _ref9.query,\n          fullPath = _ref9.fullPath;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref10 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee4(resolve) {\n          var newTag;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  // 设置新的 tag 在新打开一个以前没打开过的页面时使用\n                  newTag = tag;\n                  newTag.params = params || newTag.params;\n                  newTag.query = query || newTag.query;\n                  newTag.fullPath = fullPath || newTag.fullPath; // 添加进当前显示的页面数组\n\n                  state.opened.push(newTag); // 如果这个页面需要缓存 将其添加到缓存设置\n\n                  if (isKeepAlive(newTag)) {\n                    commit('keepAlivePush', tag.name);\n                  } // 持久化\n\n\n                  _context4.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class current\n     * @description 打开一个新的页面\n     * @param {Object} state vuex state\n     * @param {Object} param 从路由钩子的 to 对象上获取 { name, params, query, fullPath } 路由信息\n     */\n    open: function open(_ref11, _ref12) {\n      var state = _ref11.state,\n          commit = _ref11.commit,\n          dispatch = _ref11.dispatch;\n      var name = _ref12.name,\n          params = _ref12.params,\n          query = _ref12.query,\n          fullPath = _ref12.fullPath;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref13 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(resolve) {\n          var opened, pageOpendIndex, pageOpend, page;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  // 已经打开的页面\n                  opened = state.opened; // 判断此页面是否已经打开 并且记录位置\n\n                  pageOpendIndex = 0;\n                  pageOpend = opened.find(function (page, index) {\n                    var same = page.fullPath === fullPath;\n                    pageOpendIndex = same ? index : pageOpendIndex;\n                    return same;\n                  });\n\n                  if (!pageOpend) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  _context5.next = 6;\n                  return dispatch('openedUpdate', {\n                    index: pageOpendIndex,\n                    params: params,\n                    query: query,\n                    fullPath: fullPath\n                  });\n\n                case 6:\n                  _context5.next = 12;\n                  break;\n\n                case 8:\n                  // 页面以前没有打开过\n                  page = state.pool.find(function (t) {\n                    return t.name === name;\n                  }); // 如果这里没有找到 page 代表这个路由虽然在框架内 但是不参与标签页显示\n\n                  if (!page) {\n                    _context5.next = 12;\n                    break;\n                  }\n\n                  _context5.next = 12;\n                  return dispatch('add', {\n                    tag: Object.assign({}, page),\n                    params: params,\n                    query: query,\n                    fullPath: fullPath\n                  });\n\n                case 12:\n                  commit('currentSet', fullPath); // end\n\n                  resolve();\n\n                case 14:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x5) {\n          return _ref13.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 关闭一个 tag (关闭一个页面)\n     * @param {Object} state vuex state\n     * @param {Object} param { tagName: 要关闭的标签名字 }\n     */\n    close: function close(_ref14, _ref15) {\n      var state = _ref14.state,\n          commit = _ref14.commit,\n          dispatch = _ref14.dispatch;\n      var tagName = _ref15.tagName;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref16 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee6(resolve) {\n          var newPage, isCurrent, len, i, index, _newPage, _newPage$name, name, _newPage$params, params, _newPage$query, query, routerObj;\n\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  // 下个新的页面\n                  newPage = state.opened[0];\n                  isCurrent = state.current === tagName; // 如果关闭的页面就是当前显示的页面\n\n                  if (!isCurrent) {\n                    _context6.next = 12;\n                    break;\n                  }\n\n                  // 去找一个新的页面\n                  len = state.opened.length;\n                  i = 1;\n\n                case 5:\n                  if (!(i < len)) {\n                    _context6.next = 12;\n                    break;\n                  }\n\n                  if (!(state.opened[i].fullPath === tagName)) {\n                    _context6.next = 9;\n                    break;\n                  }\n\n                  if (i < len - 1) {\n                    newPage = state.opened[i + 1];\n                  } else {\n                    newPage = state.opened[i - 1];\n                  }\n\n                  return _context6.abrupt(\"break\", 12);\n\n                case 9:\n                  i++;\n                  _context6.next = 5;\n                  break;\n\n                case 12:\n                  // 找到这个页面在已经打开的数据里是第几个\n                  index = state.opened.findIndex(function (page) {\n                    return page.fullPath === tagName;\n                  });\n\n                  if (index >= 0) {\n                    // 如果这个页面是缓存的页面 将其在缓存设置中删除\n                    commit('keepAliveRemove', state.opened[index].name); // 更新数据 删除关闭的页面\n\n                    state.opened.splice(index, 1);\n                  } // 持久化\n\n\n                  _context6.next = 16;\n                  return dispatch('opend2db');\n\n                case 16:\n                  // 最后需要判断是否需要跳到首页\n                  if (isCurrent) {\n                    _newPage = newPage, _newPage$name = _newPage.name, name = _newPage$name === void 0 ? '' : _newPage$name, _newPage$params = _newPage.params, params = _newPage$params === void 0 ? {} : _newPage$params, _newPage$query = _newPage.query, query = _newPage$query === void 0 ? {} : _newPage$query;\n                    routerObj = {\n                      name: name,\n                      params: params,\n                      query: query\n                    };\n                    router.push(routerObj);\n                  } // end\n\n\n                  resolve();\n\n                case 18:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function (_x6) {\n          return _ref16.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 关闭当前标签左边的标签\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeLeft: function closeLeft(_ref17) {\n      var state = _ref17.state,\n          commit = _ref17.commit,\n          dispatch = _ref17.dispatch;\n\n      var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref18.pageSelect;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref19 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee7(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  });\n\n                  if (currentIndex > 0) {\n                    // 删除打开的页面 并在缓存设置中删除\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref20) {\n                      var name = _ref20.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  }\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context7.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function (_x7) {\n          return _ref19.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 关闭当前标签右边的标签\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeRight: function closeRight(_ref21) {\n      var state = _ref21.state,\n          commit = _ref21.commit,\n          dispatch = _ref21.dispatch;\n\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref22.pageSelect;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref23 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee8(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面 并在缓存设置中删除\n\n                  state.opened.splice(currentIndex + 1).forEach(function (_ref24) {\n                    var name = _ref24.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 设置当前的页面\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context8.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        return function (_x8) {\n          return _ref23.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 关闭当前激活之外的 tag\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeOther: function closeOther(_ref25) {\n      var state = _ref25.state,\n          commit = _ref25.commit,\n          dispatch = _ref25.dispatch;\n\n      var _ref26 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref26.pageSelect;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref27 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee9(resolve) {\n          var pageAim, currentIndex;\n          return regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面数据 并更新缓存设置\n\n                  if (currentIndex === 0) {\n                    state.opened.splice(1).forEach(function (_ref28) {\n                      var name = _ref28.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } else {\n                    state.opened.splice(currentIndex + 1).forEach(function (_ref29) {\n                      var name = _ref29.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref30) {\n                      var name = _ref30.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } // 设置新的页面\n\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context9.next = 8;\n                  return dispatch('opend2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        return function (_x9) {\n          return _ref27.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @class opened\n     * @description 关闭所有 tag\n     * @param {Object} state vuex state\n     */\n    closeAll: function closeAll(_ref31) {\n      var state = _ref31.state,\n          commit = _ref31.commit,\n          dispatch = _ref31.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref32 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee10(resolve) {\n          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  // 删除打开的页面 并在缓存设置中删除\n                  state.opened.splice(1).forEach(function (_ref33) {\n                    var name = _ref33.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 持久化\n\n                  _context10.next = 3;\n                  return dispatch('opend2db');\n\n                case 3:\n                  // 关闭所有的标签页后需要判断一次现在是不是在首页\n                  if (router.app.$route.name !== 'index') {\n                    router.push({\n                      name: 'index'\n                    });\n                  } // end\n\n\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10);\n        }));\n\n        return function (_x10) {\n          return _ref32.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  mutations: {\n    /**\n     * @class keepAlive\n     * @description 从已经打开的页面记录中更新需要缓存的页面记录\n     * @param {Object} state vuex state\n     */\n    keepAliveRefresh: function keepAliveRefresh(state) {\n      state.keepAlive = state.opened.filter(function (item) {\n        return isKeepAlive(item);\n      }).map(function (e) {\n        return e.name;\n      });\n    },\n\n    /**\n     * @description 删除一个页面的缓存设置\n     * @param {Object} state vuex state\n     * @param {String} name name\n     */\n    keepAliveRemove: function keepAliveRemove(state, name) {\n      var list = _toConsumableArray(state.keepAlive);\n\n      var index = list.findIndex(function (item) {\n        return item === name;\n      });\n\n      if (index !== -1) {\n        list.splice(index, 1);\n        state.keepAlive = list;\n      }\n    },\n\n    /**\n     * @description 增加一个页面的缓存设置\n     * @param {Object} state vuex state\n     * @param {String} name name\n     */\n    keepAlivePush: function keepAlivePush(state, name) {\n      var keep = _toConsumableArray(state.keepAlive);\n\n      keep.push(name);\n      state.keepAlive = keep;\n    },\n\n    /**\n     * @description 清空页面缓存设置\n     * @param {Object} state vuex state\n     */\n    keepAliveClean: function keepAliveClean(state) {\n      state.keepAlive = [];\n    },\n\n    /**\n     * @class current\n     * @description 设置当前激活的页面 fullPath\n     * @param {Object} state vuex state\n     * @param {String} fullPath new fullPath\n     */\n    currentSet: function currentSet(state, fullPath) {\n      state.current = fullPath;\n    },\n\n    /**\n     * @class pool\n     * @description 保存 pool (候选池)\n     * @param {Object} state vuex state\n     * @param {Array} routes routes\n     */\n    init: function init(state, routes) {\n      var pool = [];\n\n      var push = function push(routes) {\n        routes.forEach(function (route) {\n          if (route.children) {\n            push(route.children);\n          } else {\n            if (!route.hidden) {\n              var meta = route.meta,\n                  name = route.name,\n                  path = route.path;\n              pool.push({\n                meta: meta,\n                name: name,\n                path: path\n              });\n            }\n          }\n        });\n      };\n\n      push(routes);\n      state.pool = pool;\n    }\n  }\n};",{"version":3,"sources":["E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\page.js"],"names":["get","router","setting","isKeepAlive","data","namespaced","state","pool","opened","page","current","keepAlive","actions","openedLoad","commit","dispatch","Promise","resolve","dbName","path","defaultValue","user","root","value","valid","map","fullPath","push","find","item","name","Object","assign","filter","index","opend2db","openedUpdate","params","query","splice","add","tag","newTag","open","pageOpendIndex","pageOpend","same","t","close","tagName","newPage","isCurrent","len","length","i","findIndex","routerObj","closeLeft","pageSelect","pageAim","currentIndex","forEach","app","$route","closeRight","closeOther","closeAll","mutations","keepAliveRefresh","e","keepAliveRemove","list","keepAlivePush","keep","keepAliveClean","currentSet","init","routes","route","children","hidden","meta"],"mappings":"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","sourcesContent":["import { get } from 'lodash'\nimport router from '@/router'\nimport setting from '@/setting.js'\n\n// 判定是否需要缓存\nconst isKeepAlive = data => get(data, 'meta.cache', false)\n\nexport default {\n  namespaced: true,\n  state: {\n    // 可以在多页 tab 模式下显示的页面\n    pool: [],\n    // 当前显示的多页面列表\n    opened: setting.page.opened,\n    // 当前页面\n    current: '',\n    // 需要缓存的页面 name\n    keepAlive: []\n  },\n  actions: {\n    /**\n     * @class opened\n     * @description 从持久化数据载入分页列表\n     * @param {Object} state vuex state\n     */\n    openedLoad ({ state, commit, dispatch }) {\n      return new Promise(async resolve => {\n        // store 赋值\n        const value = await dispatch('d2admin/db/get', {\n          dbName: 'sys',\n          path: 'page.opened',\n          defaultValue: setting.page.opened,\n          user: true\n        }, { root: true })\n        // 在处理函数中进行数据优化 过滤掉现在已经失效的页签或者已经改变了信息的页签\n        // 以 fullPath 字段为准\n        // 如果页面过多的话可能需要优化算法\n        // valid 有效列表 1, 1, 0, 1 => 有效, 有效, 失效, 有效\n        const valid = []\n        // 处理数据\n        state.opened = value.map(opened => {\n          // 忽略首页\n          if (opened.fullPath === '/') {\n            valid.push(1)\n            return opened\n          }\n          // 尝试在所有的支持多标签页的页面里找到 name 匹配的页面\n          const find = state.pool.find(item => item.name === opened.name)\n          // 记录有效或无效信息\n          valid.push(find ? 1 : 0)\n          // 返回合并后的数据 新的覆盖旧的\n          // 新的数据中一般不会携带 params 和 query, 所以旧的参数会留存\n          return Object.assign({}, opened, find)\n        }).filter((opened, index) => valid[index] === 1)\n        // 根据 opened 数据生成缓存设置\n        commit('keepAliveRefresh')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * 将 opened 属性赋值并持久化 在这之前请先确保已经更新了 state.opened\n     * @param {Object} state vuex state\n     */\n    opend2db ({ state, dispatch }) {\n      return new Promise(async resolve => {\n        // 设置数据\n        dispatch('d2admin/db/set', {\n          dbName: 'sys',\n          path: 'page.opened',\n          value: state.opened,\n          user: true\n        }, { root: true })\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 更新页面列表上的某一项\n     * @param {Object} state vuex state\n     * @param {Object} param { index, params, query, fullPath } 路由信息\n     */\n    openedUpdate ({ state, commit, dispatch }, { index, params, query, fullPath }) {\n      return new Promise(async resolve => {\n        // 更新页面列表某一项\n        let page = state.opened[index]\n        page.params = params || page.params\n        page.query = query || page.query\n        page.fullPath = fullPath || page.fullPath\n        state.opened.splice(index, 1, page)\n        // 持久化\n        await dispatch('opend2db')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 新增一个 tag (打开一个页面)\n     * @param {Object} state vuex state\n     * @param {Object} param new tag info\n     */\n    add ({ state, commit, dispatch }, { tag, params, query, fullPath }) {\n      return new Promise(async resolve => {\n        // 设置新的 tag 在新打开一个以前没打开过的页面时使用\n        let newTag = tag\n        newTag.params = params || newTag.params\n        newTag.query = query || newTag.query\n        newTag.fullPath = fullPath || newTag.fullPath\n        // 添加进当前显示的页面数组\n        state.opened.push(newTag)\n        // 如果这个页面需要缓存 将其添加到缓存设置\n        if (isKeepAlive(newTag)) {\n          commit('keepAlivePush', tag.name)\n        }\n        // 持久化\n        await dispatch('opend2db')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class current\n     * @description 打开一个新的页面\n     * @param {Object} state vuex state\n     * @param {Object} param 从路由钩子的 to 对象上获取 { name, params, query, fullPath } 路由信息\n     */\n    open ({ state, commit, dispatch }, { name, params, query, fullPath }) {\n      return new Promise(async resolve => {\n        // 已经打开的页面\n        let opened = state.opened\n        // 判断此页面是否已经打开 并且记录位置\n        let pageOpendIndex = 0\n        const pageOpend = opened.find((page, index) => {\n          const same = page.fullPath === fullPath\n          pageOpendIndex = same ? index : pageOpendIndex\n          return same\n        })\n        if (pageOpend) {\n          // 页面以前打开过\n          await dispatch('openedUpdate', {\n            index: pageOpendIndex,\n            params,\n            query,\n            fullPath\n          })\n        } else {\n          // 页面以前没有打开过\n          let page = state.pool.find(t => t.name === name)\n          // 如果这里没有找到 page 代表这个路由虽然在框架内 但是不参与标签页显示\n          if (page) {\n            await dispatch('add', {\n              tag: Object.assign({}, page),\n              params,\n              query,\n              fullPath\n            })\n          }\n        }\n        commit('currentSet', fullPath)\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 关闭一个 tag (关闭一个页面)\n     * @param {Object} state vuex state\n     * @param {Object} param { tagName: 要关闭的标签名字 }\n     */\n    close ({ state, commit, dispatch }, { tagName }) {\n      return new Promise(async resolve => {\n        // 下个新的页面\n        let newPage = state.opened[0]\n        const isCurrent = state.current === tagName\n        // 如果关闭的页面就是当前显示的页面\n        if (isCurrent) {\n          // 去找一个新的页面\n          let len = state.opened.length\n          for (let i = 1; i < len; i++) {\n            if (state.opened[i].fullPath === tagName) {\n              if (i < len - 1) {\n                newPage = state.opened[i + 1]\n              } else {\n                newPage = state.opened[i - 1]\n              }\n              break\n            }\n          }\n        }\n        // 找到这个页面在已经打开的数据里是第几个\n        const index = state.opened.findIndex(page => page.fullPath === tagName)\n        if (index >= 0) {\n          // 如果这个页面是缓存的页面 将其在缓存设置中删除\n          commit('keepAliveRemove', state.opened[index].name)\n          // 更新数据 删除关闭的页面\n          state.opened.splice(index, 1)\n        }\n        // 持久化\n        await dispatch('opend2db')\n        // 最后需要判断是否需要跳到首页\n        if (isCurrent) {\n          const { name = '', params = {}, query = {} } = newPage\n          let routerObj = {\n            name,\n            params,\n            query\n          }\n          router.push(routerObj)\n        }\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 关闭当前标签左边的标签\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeLeft ({ state, commit, dispatch }, { pageSelect } = {}) {\n      return new Promise(async resolve => {\n        const pageAim = pageSelect || state.current\n        let currentIndex = 0\n        state.opened.forEach((page, index) => {\n          if (page.fullPath === pageAim) {\n            currentIndex = index\n          }\n        })\n        if (currentIndex > 0) {\n          // 删除打开的页面 并在缓存设置中删除\n          state.opened.splice(1, currentIndex - 1).forEach(({ name }) => commit('keepAliveRemove', name))\n        }\n        state.current = pageAim\n        if (router.app.$route.fullPath !== pageAim) {\n          router.push(pageAim)\n        }\n        // 持久化\n        await dispatch('opend2db')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 关闭当前标签右边的标签\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeRight ({ state, commit, dispatch }, { pageSelect } = {}) {\n      return new Promise(async resolve => {\n        const pageAim = pageSelect || state.current\n        let currentIndex = 0\n        state.opened.forEach((page, index) => {\n          if (page.fullPath === pageAim) {\n            currentIndex = index\n          }\n        })\n        // 删除打开的页面 并在缓存设置中删除\n        state.opened.splice(currentIndex + 1).forEach(({ name }) => commit('keepAliveRemove', name))\n        // 设置当前的页面\n        state.current = pageAim\n        if (router.app.$route.fullPath !== pageAim) {\n          router.push(pageAim)\n        }\n        // 持久化\n        await dispatch('opend2db')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 关闭当前激活之外的 tag\n     * @param {Object} state vuex state\n     * @param {Object} param { pageSelect: 当前选中的tagName }\n     */\n    closeOther ({ state, commit, dispatch }, { pageSelect } = {}) {\n      return new Promise(async resolve => {\n        const pageAim = pageSelect || state.current\n        let currentIndex = 0\n        state.opened.forEach((page, index) => {\n          if (page.fullPath === pageAim) {\n            currentIndex = index\n          }\n        })\n        // 删除打开的页面数据 并更新缓存设置\n        if (currentIndex === 0) {\n          state.opened.splice(1).forEach(({ name }) => commit('keepAliveRemove', name))\n        } else {\n          state.opened.splice(currentIndex + 1).forEach(({ name }) => commit('keepAliveRemove', name))\n          state.opened.splice(1, currentIndex - 1).forEach(({ name }) => commit('keepAliveRemove', name))\n        }\n        // 设置新的页面\n        state.current = pageAim\n        if (router.app.$route.fullPath !== pageAim) {\n          router.push(pageAim)\n        }\n        // 持久化\n        await dispatch('opend2db')\n        // end\n        resolve()\n      })\n    },\n    /**\n     * @class opened\n     * @description 关闭所有 tag\n     * @param {Object} state vuex state\n     */\n    closeAll ({ state, commit, dispatch }) {\n      return new Promise(async resolve => {\n        // 删除打开的页面 并在缓存设置中删除\n        state.opened.splice(1).forEach(({ name }) => commit('keepAliveRemove', name))\n        // 持久化\n        await dispatch('opend2db')\n        // 关闭所有的标签页后需要判断一次现在是不是在首页\n        if (router.app.$route.name !== 'index') {\n          router.push({\n            name: 'index'\n          })\n        }\n        // end\n        resolve()\n      })\n    }\n  },\n  mutations: {\n    /**\n     * @class keepAlive\n     * @description 从已经打开的页面记录中更新需要缓存的页面记录\n     * @param {Object} state vuex state\n     */\n    keepAliveRefresh (state) {\n      state.keepAlive = state.opened.filter(item => isKeepAlive(item)).map(e => e.name)\n    },\n    /**\n     * @description 删除一个页面的缓存设置\n     * @param {Object} state vuex state\n     * @param {String} name name\n     */\n    keepAliveRemove (state, name) {\n      const list = [ ...state.keepAlive ]\n      const index = list.findIndex(item => item === name)\n\n      if (index !== -1) {\n        list.splice(index, 1)\n        state.keepAlive = list\n      }\n    },\n    /**\n     * @description 增加一个页面的缓存设置\n     * @param {Object} state vuex state\n     * @param {String} name name\n     */\n    keepAlivePush (state, name) {\n      const keep = [ ...state.keepAlive ]\n      keep.push(name)\n      state.keepAlive = keep\n    },\n    /**\n     * @description 清空页面缓存设置\n     * @param {Object} state vuex state\n     */\n    keepAliveClean (state) {\n      state.keepAlive = []\n    },\n    /**\n     * @class current\n     * @description 设置当前激活的页面 fullPath\n     * @param {Object} state vuex state\n     * @param {String} fullPath new fullPath\n     */\n    currentSet (state, fullPath) {\n      state.current = fullPath\n    },\n    /**\n     * @class pool\n     * @description 保存 pool (候选池)\n     * @param {Object} state vuex state\n     * @param {Array} routes routes\n     */\n    init (state, routes) {\n      const pool = []\n      const push = function (routes) {\n        routes.forEach(route => {\n          if (route.children) {\n            push(route.children)\n          } else {\n            if (!route.hidden) {\n              const { meta, name, path } = route\n              pool.push({ meta, name, path })\n            }\n          }\n        })\n      }\n      push(routes)\n      state.pool = pool\n    }\n  }\n}\n"]}]}