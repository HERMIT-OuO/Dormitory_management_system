{"remainingRequest":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js!E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ICE\\VUE-ADMIN\\src\\plugin\\axios\\index.js","dependencies":[{"path":"E:\\ICE\\VUE-ADMIN\\src\\plugin\\axios\\index.js","mtime":1558772579837},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '@/store';\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport util from '@/libs/util'; // 创建一个错误\n\nfunction errorCreate(msg) {\n  var error = new Error(msg);\n  errorLog(error);\n  throw error;\n} // 记录和显示错误\n\n\nfunction errorLog(error) {\n  // 添加到日志\n  store.dispatch('d2admin/log/push', {\n    message: '数据请求异常',\n    type: 'danger',\n    meta: {\n      error: error\n    }\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>');\n    console.log(error);\n  } // 显示提示\n\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n} // 创建一个 axios 实例\n\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n\n}); // // 请求拦截器\n// service.interceptors.request.use(\n//   config => {\n//     // 在请求发送之前做一些处理\n//     const token = util.cookies.get('token')\n//     // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n//     config.headers['X-Token'] = token\n//     return config\n//   },\n//   error => {\n//     // 发送失败\n//     console.log(error)\n//     Promise.reject(error)\n//   }\n// )\n// 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 这个状态码是和后端约定的\n\n  var code = dataAxios.code; // 根据 code 进行判断\n\n  if (code === undefined) {\n    // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n    return dataAxios;\n  } else {\n    // 有 code 代表这是一个后端接口 可以进行进一步的判断\n    switch (code) {\n      case 0:\n        // [ 示例 ] code === 0 代表没有错误\n        return dataAxios.data;\n\n      case 'xxx':\n        // [ 示例 ] 其它和后台约定的 code\n        errorCreate(\"[ code: xxx ] \".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n\n      default:\n        // 不是正确的 code\n        errorCreate(\"\".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n    }\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error);\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["E:\\ICE\\VUE-ADMIN\\src\\plugin\\axios\\index.js"],"names":["store","axios","Message","util","errorCreate","msg","error","Error","errorLog","dispatch","message","type","meta","process","env","NODE_ENV","log","danger","console","duration","service","create","baseURL","VUE_APP_API","timeout","interceptors","response","use","dataAxios","data","code","undefined","config","url","status","Promise","reject"],"mappings":"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","sourcesContent":["import store from '@/store'\nimport axios from 'axios'\nimport { Message } from 'element-ui'\nimport util from '@/libs/util'\n\n// 创建一个错误\nfunction errorCreate (msg) {\n  const error = new Error(msg)\n  errorLog(error)\n  throw error\n}\n\n// 记录和显示错误\nfunction errorLog (error) {\n  // 添加到日志\n  store.dispatch('d2admin/log/push', {\n    message: '数据请求异常',\n    type: 'danger',\n    meta: {\n      error\n    }\n  })\n  // 打印到控制台\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>')\n    console.log(error)\n  }\n  // 显示提示\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  })\n}\n\n// 创建一个 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n})\n\n// // 请求拦截器\n// service.interceptors.request.use(\n//   config => {\n//     // 在请求发送之前做一些处理\n//     const token = util.cookies.get('token')\n//     // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n//     config.headers['X-Token'] = token\n//     return config\n//   },\n//   error => {\n//     // 发送失败\n//     console.log(error)\n//     Promise.reject(error)\n//   }\n// )\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // dataAxios 是 axios 返回数据中的 data\n    const dataAxios = response.data\n    // 这个状态码是和后端约定的\n    const { code } = dataAxios\n    // 根据 code 进行判断\n    if (code === undefined) {\n      // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n      return dataAxios\n    } else {\n      // 有 code 代表这是一个后端接口 可以进行进一步的判断\n      switch (code) {\n        case 0:\n          // [ 示例 ] code === 0 代表没有错误\n          return dataAxios.data\n        case 'xxx':\n          // [ 示例 ] 其它和后台约定的 code\n          errorCreate(`[ code: xxx ] ${dataAxios.msg}: ${response.config.url}`)\n          break\n        default:\n          // 不是正确的 code\n          errorCreate(`${dataAxios.msg}: ${response.config.url}`)\n          break\n      }\n    }\n  },\n  error => {\n    if (error && error.response) {\n      switch (error.response.status) {\n        case 400: error.message = '请求错误'; break\n        case 401: error.message = '未授权，请登录'; break\n        case 403: error.message = '拒绝访问'; break\n        case 404: error.message = `请求地址出错: ${error.response.config.url}`; break\n        case 408: error.message = '请求超时'; break\n        case 500: error.message = '服务器内部错误'; break\n        case 501: error.message = '服务未实现'; break\n        case 502: error.message = '网关错误'; break\n        case 503: error.message = '服务不可用'; break\n        case 504: error.message = '网关超时'; break\n        case 505: error.message = 'HTTP版本不受支持'; break\n        default: break\n      }\n    }\n    errorLog(error)\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"]}]}