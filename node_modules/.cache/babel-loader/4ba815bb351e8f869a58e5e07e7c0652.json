{"remainingRequest":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js!E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js!E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\account.js","dependencies":[{"path":"E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\account.js","mtime":1558363759004},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ICE\\VUE-ADMIN\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\ICE\\\\VUE-ADMIN\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { Message, MessageBox } from 'element-ui';\nimport util from '@/libs/util.js';\nimport router from '@/router';\nimport { AccountLogin } from '@api/sys.login';\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象 任何 vue-router 支持的格式\n     */\n    login: function login(_ref) {\n      var dispatch = _ref.dispatch;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$username = _ref2.username,\n          username = _ref2$username === void 0 ? '' : _ref2$username,\n          _ref2$password = _ref2.password,\n          password = _ref2$password === void 0 ? '' : _ref2$password;\n\n      return new Promise(function (resolve, reject) {\n        // 开始请求登录接口\n        AccountLogin({\n          username: username,\n          password: password\n        }).then(\n        /*#__PURE__*/\n        function () {\n          var _ref3 = _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee(res) {\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n                    // 整个系统依赖这两个数据进行校验和存储\n                    // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n                    // token 代表用户当前登录状态 建议在网络请求中携带 token\n                    // 如有必要 token 需要定时更新，默认保存一天\n                    util.cookies.set('uuid', res.uuid);\n                    util.cookies.set('token', res.token); // 设置 vuex 用户信息\n\n                    _context.next = 4;\n                    return dispatch('d2admin/user/set', {\n                      name: res.name\n                    }, {\n                      root: true\n                    });\n\n                  case 4:\n                    _context.next = 6;\n                    return dispatch('load');\n\n                  case 6:\n                    // 结束\n                    resolve();\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          console.log('err: ', err);\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * @description 注销用户并返回登录页面\n     * @param {Object} param context\n     * @param {Object} param confirm {Boolean} 是否需要确认\n     */\n    logout: function logout(_ref4) {\n      var commit = _ref4.commit,\n          dispatch = _ref4.dispatch;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$confirm = _ref5.confirm,\n          confirm = _ref5$confirm === void 0 ? false : _ref5$confirm;\n\n      /**\n       * @description 注销\n       */\n      function logout() {\n        return _logout.apply(this, arguments);\n      } // 判断是否需要确认\n\n\n      function _logout() {\n        _logout = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2() {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 删除cookie\n                  util.cookies.remove('token');\n                  util.cookies.remove('uuid'); // 清空 vuex 用户信息\n\n                  _context2.next = 4;\n                  return dispatch('d2admin/user/set', {}, {\n                    root: true\n                  });\n\n                case 4:\n                  // 跳转路由\n                  router.push({\n                    name: 'login'\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _logout.apply(this, arguments);\n      }\n\n      if (confirm) {\n        commit('d2admin/gray/set', true, {\n          root: true\n        });\n        MessageBox.confirm('注销当前账户吗?  打开的标签页和用户设置将会被保存。', '确认操作', {\n          confirmButtonText: '确定注销',\n          cancelButtonText: '放弃',\n          type: 'warning'\n        }).then(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          logout();\n        }).catch(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          Message({\n            message: '放弃注销用户'\n          });\n        });\n      } else {\n        logout();\n      }\n    },\n\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     */\n    load: function load(_ref6) {\n      var dispatch = _ref6.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return dispatch('d2admin/user/load', null, {\n                    root: true\n                  });\n\n                case 2:\n                  _context3.next = 4;\n                  return dispatch('d2admin/theme/load', null, {\n                    root: true\n                  });\n\n                case 4:\n                  _context3.next = 6;\n                  return dispatch('d2admin/transition/load', null, {\n                    root: true\n                  });\n\n                case 6:\n                  _context3.next = 8;\n                  return dispatch('d2admin/page/openedLoad', null, {\n                    root: true\n                  });\n\n                case 8:\n                  _context3.next = 10;\n                  return dispatch('d2admin/menu/asideCollapseLoad', null, {\n                    root: true\n                  });\n\n                case 10:\n                  _context3.next = 12;\n                  return dispatch('d2admin/size/load', null, {\n                    root: true\n                  });\n\n                case 12:\n                  // end\n                  resolve();\n\n                case 13:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x2) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};",{"version":3,"sources":["E:\\ICE\\VUE-ADMIN\\src\\store\\modules\\d2admin\\modules\\account.js"],"names":["Message","MessageBox","util","router","AccountLogin","namespaced","actions","login","dispatch","username","password","Promise","resolve","reject","then","res","cookies","set","uuid","token","name","root","catch","err","console","log","logout","commit","confirm","remove","push","confirmButtonText","cancelButtonText","type","message","load"],"mappings":"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","sourcesContent":["import { Message, MessageBox } from 'element-ui'\nimport util from '@/libs/util.js'\nimport router from '@/router'\nimport { AccountLogin } from '@api/sys.login'\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象 任何 vue-router 支持的格式\n     */\n    login ({ dispatch }, {\n      username = '',\n      password = ''\n    } = {}) {\n      return new Promise((resolve, reject) => {\n        // 开始请求登录接口\n        AccountLogin({\n          username,\n          password\n        })\n          .then(async res => {\n            // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n            // 整个系统依赖这两个数据进行校验和存储\n            // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n            // token 代表用户当前登录状态 建议在网络请求中携带 token\n            // 如有必要 token 需要定时更新，默认保存一天\n            util.cookies.set('uuid', res.uuid)\n            util.cookies.set('token', res.token)\n            // 设置 vuex 用户信息\n            await dispatch('d2admin/user/set', {\n              name: res.name\n            }, { root: true })\n            // 用户登录后从持久化数据加载一系列的设置\n            await dispatch('load')\n            // 结束\n            resolve()\n          })\n          .catch(err => {\n            console.log('err: ', err)\n            reject(err)\n          })\n      })\n    },\n    /**\n     * @description 注销用户并返回登录页面\n     * @param {Object} param context\n     * @param {Object} param confirm {Boolean} 是否需要确认\n     */\n    logout ({ commit, dispatch }, { confirm = false } = {}) {\n      /**\n       * @description 注销\n       */\n      async function logout () {\n        // 删除cookie\n        util.cookies.remove('token')\n        util.cookies.remove('uuid')\n        // 清空 vuex 用户信息\n        await dispatch('d2admin/user/set', {}, { root: true })\n        // 跳转路由\n        router.push({\n          name: 'login'\n        })\n      }\n      // 判断是否需要确认\n      if (confirm) {\n        commit('d2admin/gray/set', true, { root: true })\n        MessageBox.confirm('注销当前账户吗?  打开的标签页和用户设置将会被保存。', '确认操作', {\n          confirmButtonText: '确定注销',\n          cancelButtonText: '放弃',\n          type: 'warning'\n        })\n          .then(() => {\n            commit('d2admin/gray/set', false, { root: true })\n            logout()\n          })\n          .catch(() => {\n            commit('d2admin/gray/set', false, { root: true })\n            Message({\n              message: '放弃注销用户'\n            })\n          })\n      } else {\n        logout()\n      }\n    },\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     */\n    load ({ dispatch }) {\n      return new Promise(async resolve => {\n        // DB -> store 加载用户名\n        await dispatch('d2admin/user/load', null, { root: true })\n        // DB -> store 加载主题\n        await dispatch('d2admin/theme/load', null, { root: true })\n        // DB -> store 加载页面过渡效果设置\n        await dispatch('d2admin/transition/load', null, { root: true })\n        // DB -> store 持久化数据加载上次退出时的多页列表\n        await dispatch('d2admin/page/openedLoad', null, { root: true })\n        // DB -> store 持久化数据加载侧边栏折叠状态\n        await dispatch('d2admin/menu/asideCollapseLoad', null, { root: true })\n        // DB -> store 持久化数据加载全局尺寸\n        await dispatch('d2admin/size/load', null, { root: true })\n        // end\n        resolve()\n      })\n    }\n  }\n}\n"]}]}